package com.leagueprojecto.api

import com.leagueprojecto.api.domain.Summoner
import com.leagueprojecto.api.services.MatchesService
import com.statsovertime.api.domain._
import spray.json._

trait JsonProtocols extends DefaultJsonProtocol {
  implicit val summonerFormat = jsonFormat5(Summoner.apply)

//  implicit val participantTimelineDataFormat = jsonFormat4(ParticipantTimelineData.apply)
//  implicit val participantFormat = jsonFormat10(Participant.apply)
//  implicit val runeFormat = jsonFormat2(Rune.apply)
//  implicit def runeListFormat[T : Rune] = jsonFormat0(List.apply[T])
//  implicit val masteryFormat = jsonFormat2(Mastery.apply)
//  implicit def masteryListFormat[T : Mastery] = jsonFormat0(List.apply[T])
//  implicit val playerFormat = jsonFormat4(Player.apply)
//  implicit val participantIdentityFormat = jsonFormat2(ParticipantIdentity.apply)
//  implicit val matchHistoryFormat = jsonFormat13(MatchHistory.apply)

  implicit val matchesFormat = jsonFormat1(MatchesService.Matches.apply)

//  implicit val participantStatsFormat = jsonFormat1(ParticipantStats.apply)
//  implicit val participantTimelineFormat = jsonFormat19(ParticipantTimeline.apply)



//  implicit object ParticipantStatsFormat extends RootJsonFormat[ParticipantStats] {
//    def write(s: ParticipantStats) =
//      JsArray(
//        JsNumber(s.assists),
//        JsNumber(s.champLevel),
//        JsNumber(s.combatPlayerScore),
//        JsNumber(s.deaths),
//        JsNumber(s.doubleKills),
//        JsBoolean(s.firstBloodAssist),
//        JsBoolean(s.firstBloodKill),
//        JsBoolean(s.firstInhibitorAssist),
//        JsBoolean(s.firstInhibitorKill),
//        JsBoolean(s.firstTowerAssist),
//        JsBoolean(s.firstTowerKill),
//        JsNumber(s.goldEarned),
//        JsNumber(s.goldSpent),
//        JsNumber(s.inhibitorKills),
//        JsNumber(s.item0),
//        JsNumber(s.item1),
//        JsNumber(s.item2),
//        JsNumber(s.item3),
//        JsNumber(s.item4),
//        JsNumber(s.item5),
//        JsNumber(s.item6),
//        JsNumber(s.killingSprees),
//        JsNumber(s.kills),
//        JsNumber(s.largestCriticalStrike),
//        JsNumber(s.largestKillingSpree),
//        JsNumber(s.largestMultiKill),
//        JsNumber(s.magicDamageDealt),
//        JsNumber(s.magicDamageTaken),
//        JsNumber(s.minionsKilled),
//        JsNumber(s.neutralMinionsKilled),
//        JsNumber(s.neutralMinionsKilledEnemyJungle),
//        JsNumber(s.neutralMinionsKilledTeamJungle),
//        JsNumber(s.nodeCapture),
//        JsNumber(s.nodeCaptureAssist),
//        JsNumber(s.nodeNeutralize),
//        JsNumber(s.nodeNeutralizeAssist),
//        JsNumber(s.objectivePlayerScore),
//        JsNumber(s.pentaKills),
//        JsNumber(s.physicalDamageDealt),
//        JsNumber(s.physicalDamageDealtToChampions),
//        JsNumber(s.physicalDamageTaken),
//        JsNumber(s.quadraKills),
//        JsNumber(s.sightWardsBoughtInGam),
//        JsNumber(s.teamObjective),
//        JsNumber(s.totalDamageDealt),
//        JsNumber(s.totalDamageDealtToChampions),
//        JsNumber(s.totalDamageTaken),
//        JsNumber(s.totalHeal),
//        JsNumber(s.totalPlayerScore),
//        JsNumber(s.totalScoreRank),
//        JsNumber(s.totalTimeCrowdControlDealt),
//        JsNumber(s.totalUnitsHealed),
//        JsNumber(s.towerKills),
//        JsNumber(s.tripleKills),
//        JsNumber(s.trueDamageDealt),
//        JsNumber(s.trueDamageDealtToChampions),
//        JsNumber(s.trueDamageTaken),
//        JsNumber(s.unrealKills),
//        JsNumber(s.visionWardsBoughtInGame),
//        JsNumber(s.wardsKilled),
//        JsNumber(s.wardsPlaced),
//        JsBoolean(s.winner)
//      )
//
//    def read(value: JsValue) = value match {
//      case JsArray(Vector(
//      JsNumber(assists),
//      JsNumber(champLevel),
//      JsNumber(combatPlayerScore),
//      JsNumber(deaths),
//      JsNumber(doubleKills),
//      JsBoolean(firstBloodAssist),
//      JsBoolean(firstBloodKill),
//      JsBoolean(firstInhibitorAssist),
//      JsBoolean(firstInhibitorKill),
//      JsBoolean(firstTowerAssist),
//      JsBoolean(firstTowerKill),
//      JsNumber(goldEarned),
//      JsNumber(goldSpent),
//      JsNumber(inhibitorKills),
//      JsNumber(item0),
//      JsNumber(item1),
//      JsNumber(item2),
//      JsNumber(item3),
//      JsNumber(item4),
//      JsNumber(item5),
//      JsNumber(item6),
//      JsNumber(killingSprees),
//      JsNumber(kills),
//      JsNumber(largestCriticalStrike),
//      JsNumber(largestKillingSpree),
//      JsNumber(largestMultiKill),
//      JsNumber(magicDamageDealt),
//      JsNumber(magicDamageDealtToChampions),
//      JsNumber(magicDamageTaken),
//      JsNumber(minionsKilled),
//      JsNumber(neutralMinionsKilled),
//      JsNumber(neutralMinionsKilledEnemyJungle),
//      JsNumber(neutralMinionsKilledTeamJungle),
//      JsNumber(nodeCapture),
//      JsNumber(nodeCaptureAssist),
//      JsNumber(nodeNeutralize),
//      JsNumber(nodeNeutralizeAssist),
//      JsNumber(objectivePlayerScore),
//      JsNumber(pentaKills),
//      JsNumber(physicalDamageDealt),
//      JsNumber(physicalDamageDealtToChampions),
//      JsNumber(physicalDamageTaken),
//      JsNumber(quadraKills),
//      JsNumber(sightWardsBoughtInGame),
//      JsNumber(teamObjective),
//      JsNumber(totalDamageDealt),
//      JsNumber(totalDamageDealtToChampions),
//      JsNumber(totalDamageTaken),
//      JsNumber(totalHeal),
//      JsNumber(totalPlayerScore),
//      JsNumber(totalScoreRank),
//      JsNumber(totalTimeCrowdControlDealt),
//      JsNumber(totalUnitsHealed),
//      JsNumber(towerKills),
//      JsNumber(tripleKills),
//      JsNumber(trueDamageDealt),
//      JsNumber(trueDamageDealtToChampions),
//      JsNumber(trueDamageTaken),
//      JsNumber(unrealKills),
//      JsNumber(visionWardsBoughtInGame),
//      JsNumber(wardsKilled),
//      JsNumber(wardsPlaced),
//      JsBoolean(winner))) =>
//        ParticipantStats(
//          assists.toLong,
//          champLevel.toLong,
//          combatPlayerScore.toLong,
//          deaths.toLong,
//          doubleKills.toLong,
//          firstBloodAssist,
//          firstBloodKill,
//          firstInhibitorAssist,
//          firstInhibitorKill,
//          firstTowerAssist,
//          firstTowerKill,
//          goldEarned.toLong,
//          goldSpent.toLong,
//          inhibitorKills.toLong,
//          item0.toLong,
//          item1.toLong,
//          item2.toLong,
//          item3.toLong,
//          item4.toLong,
//          item5.toLong,
//          item6.toLong,
//          killingSprees.toLong,
//          kills.toLong,
//          largestCriticalStrike.toLong,
//          largestKillingSpree.toLong,
//          largestMultiKill.toLong,
//          magicDamageDealt.toLong,
//          magicDamageDealtToChampions.toLong,
//          magicDamageTaken.toLong,
//          minionsKilled.toLong,
//          neutralMinionsKilled.toLong,
//          neutralMinionsKilledEnemyJungle.toLong,
//          neutralMinionsKilledTeamJungle.toLong,
//          nodeCapture.toLong,
//          nodeCaptureAssist.toLong,
//          nodeNeutralize.toLong,
//          nodeNeutralizeAssist.toLong,
//          objectivePlayerScore.toLong,
//          pentaKills.toLong,
//          physicalDamageDealt.toLong,
//          physicalDamageDealtToChampions.toLong,
//          physicalDamageTaken.toLong,
//          quadraKills.toLong,
//          sightWardsBoughtInGame.toLong,
//          teamObjective.toLong,
//          totalDamageDealt.toLong,
//          totalDamageDealtToChampions.toLong,
//          totalDamageTaken.toLong,
//          totalHeal.toLong,
//          totalPlayerScore.toLong,
//          totalScoreRank.toLong,
//          totalTimeCrowdControlDealt.toLong,
//          totalUnitsHealed.toLong,
//          towerKills.toLong,
//          tripleKills.toLong,
//          trueDamageDealt.toLong,
//          trueDamageDealtToChampions.toLong,
//          trueDamageTaken.toLong,
//          unrealKills.toLong,
//          visionWardsBoughtInGame.toLong,
//          wardsKilled.toLong,
//          wardsPlaced.toLong,
//          winner)
//      case _ => deserializationError("ParticipantStats expected")
//    }
//  }
//
//  implicit object ParticipantTimelineFormat extends RootJsonFormat[ParticipantTimeline] {
//    override def write(t: ParticipantTimeline) =
//      JsArray(
//        t.ancientGolemAssistsPerMinCounts.toJson.asJsObject,
//        t.ancientGolemKillsPerMinCounts.toJson.asJsObject,
//        t.assistedLaneDeathsPerMinDeltas.toJson.asJsObject,
//        t.assistedLaneKillsPerMinDeltas.toJson.asJsObject,
//        t.baronAssistsPerMinCounts.toJson.asJsObject,
//        t.baronKillsPerMinCounts.toJson.asJsObject,
//        t.creepsPerMinDeltas.toJson.asJsObject,
//        t.csDiffPerMinDeltas.toJson.asJsObject,
//        t.damageTakenDiffPerMinDeltas.toJson.asJsObject,
//        t.damageTakenPerMinDeltas.toJson.asJsObject,
//        t.dragonAssistsPerMinCounts.toJson.asJsObject,
//        t.dragonKillsPerMinCounts.toJson.asJsObject,
//        t.elderLizardAssistsPerMinCounts.toJson.asJsObject,
//        t.elderLizardKillsPerMinCounts.toJson.asJsObject,
//        t.goldPerMinDeltas.toJson.asJsObject,
//        t.inhibitorAssistsPerMinCounts.toJson.asJsObject,
//        t.inhibitorKillsPerMinCounts.toJson.asJsObject,
//        JsString(t.lane),
//        JsString(t.role),
//        t.towerAssistsPerMinCounts.toJson.asJsObject,
//        t.towerKillsPerMinCounts.toJson.asJsObject,
//        t.towerKillsPerMinDeltas.toJson.asJsObject,
//        t.vilemawAssistsPerMinCounts.toJson.asJsObject,
//        t.vilemawKillsPerMinCounts.toJson.asJsObject,
//        t.wardsPerMinDeltas.toJson.asJsObject,
//        t.xpDiffPerMinDeltas.toJson.asJsObject,
//        t.xpPerMinDeltas.toJson.asJsObject)
//
//    override def read(value: JsValue) = value match {
//      case JsArray(Vector(
//      JsObject(ancientGolemAssistsPerMinCounts),
//      JsObject(ancientGolemKillsPerMinCounts),
//      JsObject(assistedLaneDeathsPerMinDeltas),
//      JsObject(assistedLaneKillsPerMinDeltas),
//      JsObject(baronAssistsPerMinCounts),
//      JsObject(baronKillsPerMinCounts),
//      JsObject(creepsPerMinDeltas),
//      JsObject(csDiffPerMinDeltas),
//      JsObject(damageTakenDiffPerMinDeltas),
//      JsObject(damageTakenPerMinDeltas),
//      JsObject(dragonAssistsPerMinCounts),
//      JsObject(dragonKillsPerMinCounts),
//      JsObject(elderLizardAssistsPerMinCounts),
//      JsObject(elderLizardKillsPerMinCounts),
//      JsObject(goldPerMinDeltas),
//      JsObject(inhibitorAssistsPerMinCounts),
//      JsObject(inhibitorKillsPerMinCounts),
//      JsString(lane),
//      JsString(role),
//      JsObject(towerAssistsPerMinCounts),
//      JsObject(towerKillsPerMinCounts),
//      JsObject(towerKillsPerMinDeltas),
//      JsObject(vilemawAssistsPerMinCounts),
//      JsObject(vilemawKillsPerMinCounts),
//      JsObject(wardsPerMinDeltas),
//      JsObject(xpDiffPerMinDeltas),
//      JsObject(xpPerMinDeltas)))
//      =>
//        ParticipantTimeline(
//          ancientGolemAssistsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          ancientGolemKillsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          assistedLaneDeathsPerMinDeltas.asInstanceOf[ParticipantTimelineData],
//          assistedLaneKillsPerMinDeltas.asInstanceOf[ParticipantTimelineData],
//          baronAssistsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          baronKillsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          creepsPerMinDeltas.asInstanceOf[ParticipantTimelineData],
//          csDiffPerMinDeltas.asInstanceOf[ParticipantTimelineData],
//          damageTakenDiffPerMinDeltas.asInstanceOf[ParticipantTimelineData],
//          damageTakenPerMinDeltas.asInstanceOf[ParticipantTimelineData],
//          dragonAssistsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          dragonKillsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          elderLizardAssistsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          elderLizardKillsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          goldPerMinDeltas.asInstanceOf[ParticipantTimelineData],
//          inhibitorAssistsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          inhibitorKillsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          lane,
//          role,
//          towerAssistsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          towerKillsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          towerKillsPerMinDeltas.asInstanceOf[ParticipantTimelineData],
//          vilemawAssistsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          vilemawKillsPerMinCounts.asInstanceOf[ParticipantTimelineData],
//          wardsPerMinDeltas.asInstanceOf[ParticipantTimelineData],
//          xpDiffPerMinDeltas.asInstanceOf[ParticipantTimelineData],
//          xpPerMinDeltas.asInstanceOf[ParticipantTimelineData])
//    }
//  }

}
